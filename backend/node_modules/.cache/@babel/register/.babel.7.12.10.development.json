{
  "{\"sourceRoot\":\"/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend\",\"filename\":\"/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend",
      "filename": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport mongoose from \"mongoose\";\nimport crypto from \"crypto\";\nimport bcrypt from \"bcrypt-nodejs\";\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/auth\";\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nmongoose.Promise = Promise;\n/*\nBACK\n- SQL Injection for mongo\n- bcrypt and access token\n- try/catch in the backend\n- Print error message from catch\nFRONT\n- Fetch to login\n- Access Token in the frontend\n- Github in groups\n*/\n\nconst User = mongoose.model(\"User\", {\n  name: {\n    type: String,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  accessToken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString(\"hex\")\n  }\n}); //   PORT=9000 npm start\n\nconst port = process.env.PORT || 8080;\nconst app = express(); // Add middlewares to enable cors and json body parsing\n\napp.use(cors());\napp.use(bodyParser.json());\n\nconst authenticateUser = async (req, res, next) => {\n  next();\n}; // Create user  - sign up\n\n\napp.post(\"/users\", async (req, res) => {}); // Secure endpoint, user needs to be logged in to access this.\n\napp.get(\"/users/:id\", authenticateUser);\napp.get(\"/users/:id\", (req, res) => {}); // login user\n\napp.post(\"/sessions\", async (req, res) => {}); // Start the server\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwiYm9keVBhcnNlciIsImNvcnMiLCJtb25nb29zZSIsImNyeXB0byIsImJjcnlwdCIsIm1vbmdvVXJsIiwicHJvY2VzcyIsImVudiIsIk1PTkdPX1VSTCIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJQcm9taXNlIiwiVXNlciIsIm1vZGVsIiwibmFtZSIsInR5cGUiLCJTdHJpbmciLCJ1bmlxdWUiLCJwYXNzd29yZCIsInJlcXVpcmVkIiwiYWNjZXNzVG9rZW4iLCJkZWZhdWx0IiwicmFuZG9tQnl0ZXMiLCJ0b1N0cmluZyIsInBvcnQiLCJQT1JUIiwiYXBwIiwidXNlIiwianNvbiIsImF1dGhlbnRpY2F0ZVVzZXIiLCJyZXEiLCJyZXMiLCJuZXh0IiwicG9zdCIsImdldCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLGFBQXZCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsVUFBckI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLFFBQW5CO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixlQUFuQjtBQUVBLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQVosSUFBeUIsMEJBQTFDO0FBQ0FOLFFBQVEsQ0FBQ08sT0FBVCxDQUFpQkosUUFBakIsRUFBMkI7QUFBRUssRUFBQUEsZUFBZSxFQUFFLElBQW5CO0FBQXlCQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUE3QyxDQUEzQjtBQUNBVCxRQUFRLENBQUNVLE9BQVQsR0FBbUJBLE9BQW5CO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQyxJQUFJLEdBQUdYLFFBQVEsQ0FBQ1ksS0FBVCxDQUFlLE1BQWYsRUFBdUI7QUFDbENDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxJQUFJLEVBQUVDLE1BREY7QUFFSkMsSUFBQUEsTUFBTSxFQUFFO0FBRkosR0FENEI7QUFLbENDLEVBQUFBLFFBQVEsRUFBRTtBQUNSSCxJQUFBQSxJQUFJLEVBQUVDLE1BREU7QUFFUkcsSUFBQUEsUUFBUSxFQUFFO0FBRkYsR0FMd0I7QUFTbENDLEVBQUFBLFdBQVcsRUFBRTtBQUNYTCxJQUFBQSxJQUFJLEVBQUVDLE1BREs7QUFFWEssSUFBQUEsT0FBTyxFQUFFLE1BQU1uQixNQUFNLENBQUNvQixXQUFQLENBQW1CLEdBQW5CLEVBQXdCQyxRQUF4QixDQUFpQyxLQUFqQztBQUZKO0FBVHFCLENBQXZCLENBQWIsQyxDQWVBOztBQUNBLE1BQU1DLElBQUksR0FBR25CLE9BQU8sQ0FBQ0MsR0FBUixDQUFZbUIsSUFBWixJQUFvQixJQUFqQztBQUNBLE1BQU1DLEdBQUcsR0FBRzVCLE9BQU8sRUFBbkIsQyxDQUVBOztBQUNBNEIsR0FBRyxDQUFDQyxHQUFKLENBQVEzQixJQUFJLEVBQVo7QUFDQTBCLEdBQUcsQ0FBQ0MsR0FBSixDQUFRNUIsVUFBVSxDQUFDNkIsSUFBWCxFQUFSOztBQUVBLE1BQU1DLGdCQUFnQixHQUFHLE9BQU9DLEdBQVAsRUFBWUMsR0FBWixFQUFpQkMsSUFBakIsS0FBMEI7QUFDakRBLEVBQUFBLElBQUk7QUFDTCxDQUZELEMsQ0FJQTs7O0FBQ0FOLEdBQUcsQ0FBQ08sSUFBSixDQUFTLFFBQVQsRUFBbUIsT0FBT0gsR0FBUCxFQUFZQyxHQUFaLEtBQW9CLENBQUUsQ0FBekMsRSxDQUVBOztBQUNBTCxHQUFHLENBQUNRLEdBQUosQ0FBUSxZQUFSLEVBQXNCTCxnQkFBdEI7QUFDQUgsR0FBRyxDQUFDUSxHQUFKLENBQVEsWUFBUixFQUFzQixDQUFDSixHQUFELEVBQU1DLEdBQU4sS0FBYyxDQUFFLENBQXRDLEUsQ0FFQTs7QUFDQUwsR0FBRyxDQUFDTyxJQUFKLENBQVMsV0FBVCxFQUFzQixPQUFPSCxHQUFQLEVBQVlDLEdBQVosS0FBb0IsQ0FBRSxDQUE1QyxFLENBRUE7O0FBQ0FMLEdBQUcsQ0FBQ1MsTUFBSixDQUFXWCxJQUFYLEVBQWlCLE1BQU07QUFDckJZLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLHNDQUFxQ2IsSUFBSyxFQUF2RDtBQUNELENBRkQiLCJzb3VyY2VSb290IjoiL1VzZXJzL25hdGhhbGllbm9yZHN0cm9tL0Rlc2t0b3AvbG9naW4tcHJvamVjdC9XSzIwTGl2ZVNlc3Npb24vYmFja2VuZC8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgY29ycyBmcm9tIFwiY29yc1wiO1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xuaW1wb3J0IGNyeXB0byBmcm9tIFwiY3J5cHRvXCI7XG5pbXBvcnQgYmNyeXB0IGZyb20gXCJiY3J5cHQtbm9kZWpzXCI7XG5cbmNvbnN0IG1vbmdvVXJsID0gcHJvY2Vzcy5lbnYuTU9OR09fVVJMIHx8IFwibW9uZ29kYjovL2xvY2FsaG9zdC9hdXRoXCI7XG5tb25nb29zZS5jb25uZWN0KG1vbmdvVXJsLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlIH0pO1xubW9uZ29vc2UuUHJvbWlzZSA9IFByb21pc2U7XG5cbi8qXG5CQUNLXG4tIFNRTCBJbmplY3Rpb24gZm9yIG1vbmdvXG4tIGJjcnlwdCBhbmQgYWNjZXNzIHRva2VuXG4tIHRyeS9jYXRjaCBpbiB0aGUgYmFja2VuZFxuLSBQcmludCBlcnJvciBtZXNzYWdlIGZyb20gY2F0Y2hcbkZST05UXG4tIEZldGNoIHRvIGxvZ2luXG4tIEFjY2VzcyBUb2tlbiBpbiB0aGUgZnJvbnRlbmRcbi0gR2l0aHViIGluIGdyb3Vwc1xuKi9cblxuY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsKFwiVXNlclwiLCB7XG4gIG5hbWU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdW5pcXVlOiB0cnVlLFxuICB9LFxuICBwYXNzd29yZDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgYWNjZXNzVG9rZW46IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogKCkgPT4gY3J5cHRvLnJhbmRvbUJ5dGVzKDEyOCkudG9TdHJpbmcoXCJoZXhcIiksXG4gIH0sXG59KTtcblxuLy8gICBQT1JUPTkwMDAgbnBtIHN0YXJ0XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBBZGQgbWlkZGxld2FyZXMgdG8gZW5hYmxlIGNvcnMgYW5kIGpzb24gYm9keSBwYXJzaW5nXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxuY29uc3QgYXV0aGVudGljYXRlVXNlciA9IGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBuZXh0KCk7XG59O1xuXG4vLyBDcmVhdGUgdXNlciAgLSBzaWduIHVwXG5hcHAucG9zdChcIi91c2Vyc1wiLCBhc3luYyAocmVxLCByZXMpID0+IHt9KTtcblxuLy8gU2VjdXJlIGVuZHBvaW50LCB1c2VyIG5lZWRzIHRvIGJlIGxvZ2dlZCBpbiB0byBhY2Nlc3MgdGhpcy5cbmFwcC5nZXQoXCIvdXNlcnMvOmlkXCIsIGF1dGhlbnRpY2F0ZVVzZXIpO1xuYXBwLmdldChcIi91c2Vycy86aWRcIiwgKHJlcSwgcmVzKSA9PiB7fSk7XG5cbi8vIGxvZ2luIHVzZXJcbmFwcC5wb3N0KFwiL3Nlc3Npb25zXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge30pO1xuXG4vLyBTdGFydCB0aGUgc2VydmVyXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApO1xufSk7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "bodyParser",
        "cors",
        "mongoose",
        "crypto",
        "bcrypt",
        "mongoUrl",
        "process",
        "env",
        "MONGO_URL",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "Promise",
        "User",
        "model",
        "name",
        "type",
        "String",
        "unique",
        "password",
        "required",
        "accessToken",
        "default",
        "randomBytes",
        "toString",
        "port",
        "PORT",
        "app",
        "use",
        "json",
        "authenticateUser",
        "req",
        "res",
        "next",
        "post",
        "get",
        "listen",
        "console",
        "log"
      ],
      "mappings": "AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,0BAA1C;AACAN,QAAQ,CAACO,OAAT,CAAiBJ,QAAjB,EAA2B;AAAEK,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAA3B;AACAT,QAAQ,CAACU,OAAT,GAAmBA,OAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAGX,QAAQ,CAACY,KAAT,CAAe,MAAf,EAAuB;AAClCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,MAAM,EAAE;AAFJ,GAD4B;AAKlCC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EAAEC,MADE;AAERG,IAAAA,QAAQ,EAAE;AAFF,GALwB;AASlCC,EAAAA,WAAW,EAAE;AACXL,IAAAA,IAAI,EAAEC,MADK;AAEXK,IAAAA,OAAO,EAAE,MAAMnB,MAAM,CAACoB,WAAP,CAAmB,GAAnB,EAAwBC,QAAxB,CAAiC,KAAjC;AAFJ;AATqB,CAAvB,CAAb,C,CAeA;;AACA,MAAMC,IAAI,GAAGnB,OAAO,CAACC,GAAR,CAAYmB,IAAZ,IAAoB,IAAjC;AACA,MAAMC,GAAG,GAAG5B,OAAO,EAAnB,C,CAEA;;AACA4B,GAAG,CAACC,GAAJ,CAAQ3B,IAAI,EAAZ;AACA0B,GAAG,CAACC,GAAJ,CAAQ5B,UAAU,CAAC6B,IAAX,EAAR;;AAEA,MAAMC,gBAAgB,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACjDA,EAAAA,IAAI;AACL,CAFD,C,CAIA;;;AACAN,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAmB,OAAOH,GAAP,EAAYC,GAAZ,KAAoB,CAAE,CAAzC,E,CAEA;;AACAL,GAAG,CAACQ,GAAJ,CAAQ,YAAR,EAAsBL,gBAAtB;AACAH,GAAG,CAACQ,GAAJ,CAAQ,YAAR,EAAsB,CAACJ,GAAD,EAAMC,GAAN,KAAc,CAAE,CAAtC,E,CAEA;;AACAL,GAAG,CAACO,IAAJ,CAAS,WAAT,EAAsB,OAAOH,GAAP,EAAYC,GAAZ,KAAoB,CAAE,CAA5C,E,CAEA;;AACAL,GAAG,CAACS,MAAJ,CAAWX,IAAX,EAAiB,MAAM;AACrBY,EAAAA,OAAO,CAACC,GAAR,CAAa,sCAAqCb,IAAK,EAAvD;AACD,CAFD",
      "sourceRoot": "/Users/nathalienordstrom/Desktop/login-project/WK20LiveSession/backend/",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport mongoose from \"mongoose\";\nimport crypto from \"crypto\";\nimport bcrypt from \"bcrypt-nodejs\";\n\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/auth\";\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });\nmongoose.Promise = Promise;\n\n/*\nBACK\n- SQL Injection for mongo\n- bcrypt and access token\n- try/catch in the backend\n- Print error message from catch\nFRONT\n- Fetch to login\n- Access Token in the frontend\n- Github in groups\n*/\n\nconst User = mongoose.model(\"User\", {\n  name: {\n    type: String,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  accessToken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString(\"hex\"),\n  },\n});\n\n//   PORT=9000 npm start\nconst port = process.env.PORT || 8080;\nconst app = express();\n\n// Add middlewares to enable cors and json body parsing\napp.use(cors());\napp.use(bodyParser.json());\n\nconst authenticateUser = async (req, res, next) => {\n  next();\n};\n\n// Create user  - sign up\napp.post(\"/users\", async (req, res) => {});\n\n// Secure endpoint, user needs to be logged in to access this.\napp.get(\"/users/:id\", authenticateUser);\napp.get(\"/users/:id\", (req, res) => {});\n\n// login user\napp.post(\"/sessions\", async (req, res) => {});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1611591279979
  }
}